#!/usr/bin/env ruby

# This is a utility for generating empty Ruby-Processing templates.
# -- omygawshkenas

require File.join(File.dirname(__FILE__), "base_exporter.rb")
 
module Processing
  class Generator < BaseExporter
    
    def generate!
      # Check to make sure that the main file exists
      main_file_path = ARGV.first
      usage main_file_path
      if File.exists?(main_file_path)
        puts "That sketch already exists."
        exit
      end
      main_file = File.basename(main_file_path, ".rb")
      
      # Get the substitutions
      @name = camelize(main_file)
      @file_name = underscore(main_file)
      @title = titleize(main_file)
      @width = ARGV[1] || "500"
      @height = ARGV[2] || "500" 
  
      # Make the file
      dir = File.dirname main_file_path
      mkdir_p dir
      template = File.new(File.join(File.dirname(__FILE__), "generate_files/app.rb.erb"))
      rendered = render_erb_from_string_with_binding(template.read, binding)
      File.open(File.join(dir, "#{@file_name}.rb"), "w") do |file|
        file.print rendered
      end
    end
    
    def usage(predicate)
      unless predicate
        puts <<-USAGE
  
      Usage: script/generate <sketch_to_generate> <width> <height>
      Width and Height are optional.
      
      Example: script/generate fancy_drawing/app 800 600
  
      USAGE
        exit
      end
    end
  end
end

Processing::Generator.new.generate!
